// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.fundatiacomunitarabucuresti.volunteer.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.fundatiacomunitarabucuresti.volunteer.domain.City;
import ro.fundatiacomunitarabucuresti.volunteer.domain.CityDataOnDemand;
import ro.fundatiacomunitarabucuresti.volunteer.domain.UserAccount;
import ro.fundatiacomunitarabucuresti.volunteer.domain.UserAccountDataOnDemand;

privileged aspect UserAccountDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserAccountDataOnDemand: @Component;
    
    private Random UserAccountDataOnDemand.rnd = new SecureRandom();
    
    private List<UserAccount> UserAccountDataOnDemand.data;
    
    @Autowired
    CityDataOnDemand UserAccountDataOnDemand.cityDataOnDemand;
    
    public UserAccount UserAccountDataOnDemand.getNewTransientUserAccount(int index) {
        UserAccount obj = new UserAccount();
        setCity(obj, index);
        setEmail(obj, index);
        setEnabled(obj, index);
        setFirstName(obj, index);
        setLastName(obj, index);
        setPassword(obj, index);
        setPhone(obj, index);
        setUserName(obj, index);
        return obj;
    }
    
    public void UserAccountDataOnDemand.setCity(UserAccount obj, int index) {
        City city = cityDataOnDemand.getRandomCity();
        obj.setCity(city);
    }
    
    public void UserAccountDataOnDemand.setEmail(UserAccount obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 100) {
            email = email.substring(0, 100);
        }
        obj.setEmail(email);
    }
    
    public void UserAccountDataOnDemand.setEnabled(UserAccount obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void UserAccountDataOnDemand.setFirstName(UserAccount obj, int index) {
        String firstName = "firstName_" + index;
        if (firstName.length() > 50) {
            firstName = firstName.substring(0, 50);
        }
        obj.setFirstName(firstName);
    }
    
    public void UserAccountDataOnDemand.setLastName(UserAccount obj, int index) {
        String lastName = "lastName_" + index;
        if (lastName.length() > 50) {
            lastName = lastName.substring(0, 50);
        }
        obj.setLastName(lastName);
    }
    
    public void UserAccountDataOnDemand.setPassword(UserAccount obj, int index) {
        String password = "password_" + index;
        if (password.length() > 50) {
            password = password.substring(0, 50);
        }
        obj.setPassword(password);
    }
    
    public void UserAccountDataOnDemand.setPhone(UserAccount obj, int index) {
        String phone = "phone_" + index;
        if (phone.length() > 20) {
            phone = new Random().nextInt(10) + phone.substring(1, 20);
        }
        obj.setPhone(phone);
    }
    
    public void UserAccountDataOnDemand.setUserName(UserAccount obj, int index) {
        String userName = "userName_" + index;
        if (userName.length() > 50) {
            userName = new Random().nextInt(10) + userName.substring(1, 50);
        }
        obj.setUserName(userName);
    }
    
    public UserAccount UserAccountDataOnDemand.getSpecificUserAccount(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserAccount obj = data.get(index);
        Long id = obj.getId();
        return UserAccount.findUserAccount(id);
    }
    
    public UserAccount UserAccountDataOnDemand.getRandomUserAccount() {
        init();
        UserAccount obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return UserAccount.findUserAccount(id);
    }
    
    public boolean UserAccountDataOnDemand.modifyUserAccount(UserAccount obj) {
        return false;
    }
    
    public void UserAccountDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserAccount.findUserAccountEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserAccount' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserAccount>();
        for (int i = 0; i < 10; i++) {
            UserAccount obj = getNewTransientUserAccount(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
